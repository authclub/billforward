package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*Payment Payment

swagger:model Payment
*/
type Payment struct {

	/* { "description" : "Actual monetary value of the payment. This is real value of the payment amount, thus the amount of currency received for this payment. A coupon has a real value of zero, even though the nominal amount it pays may be greater than zero.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	ActualValue float64 `json:"actualValue,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy *string `json:"changedBy,omitempty"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* { "description" : "CRM ID of the invoice.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	CrmID string `json:"crmID,omitempty"`

	/* { "description" : "The currency of the payment specified by a three character ISO 4217 currency code.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Currency string `json:"currency,omitempty"`

	/* { "description" : "Payment gateway associated with the payment", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Gateway string `json:"gateway,omitempty"`

	/* { "description" : "ID of the payment.", "verbs":["POST","PUT","GET"] }
	 */
	ID *string `json:"id,omitempty"`

	/* { "description" : "ID of the invoice associated with the payment. This may be null when a payment is not explicitly associated with an invoice. Payments may be used across multiple invoices.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	InvoiceID string `json:"invoiceID,omitempty"`

	/* { "description" : "Nominal value of the payment. This is the theoretical value of the payment, thus the value this payment can pay off an invoice. For example a coupon has a nominal value of the discount, and the actual value is zero.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	NominalValue float64 `json:"nominalValue,omitempty"`

	/* { "description" : "ID of the organization associated with the payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	OrganizationID string `json:"organizationID,omitempty"`

	/* { "description" : "ID of the payment method associated with the payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	PaymentMethodID string `json:"paymentMethodID,omitempty"`

	/* { "description" : "UTC DateTime specifying when payment was received for the invoice.", "verbs":["POST","PUT","GET"] }
	 */
	PaymentReceived strfmt.DateTime `json:"paymentReceived,omitempty"`

	/* { "description" : "ID of the refund associated with the payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	RefundID string `json:"refundID,omitempty"`

	/* { "description" : "Refunded nominal value of the payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	RefundedValue float64 `json:"refundedValue,omitempty"`

	/* { "description" : "Remaining nominal value of the payment not used. In the case when a payment is used across a range of invoices a payment may be used multiple times, each use reducing the available blance of the payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	RemainingNominalValue float64 `json:"remainingNominalValue,omitempty"`

	/* { "description" : "Type of payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Type string `json:"type,omitempty"`

	/* { "description" : "The UTC DateTime when the object was last updated.", "verbs":[] }
	 */
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCrmID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNominalValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentMethodID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefundID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefundedValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRemainingNominalValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateActualValue(formats strfmt.Registry) error {

	if err := validate.Required("actualValue", "body", float64(m.ActualValue)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateCrmID(formats strfmt.Registry) error {

	if err := validate.RequiredString("crmID", "body", string(m.CrmID)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", string(m.Currency)); err != nil {
		return err
	}

	return nil
}

var paymentGatewayEnum []interface{}

func (m *Payment) validateGatewayEnum(path, location string, value string) error {
	if paymentGatewayEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["cybersource_token","card_vault","paypal_simple","locustworld","free","coupon","credit_note","stripe","braintree","balanced","paypal","billforward_test","offline","trial","stripeACH","authorizeNet","spreedly","sagePay","trustCommerce","payvision","kash"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			paymentGatewayEnum = append(paymentGatewayEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, paymentGatewayEnum); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateGateway(formats strfmt.Registry) error {

	if err := validate.RequiredString("gateway", "body", string(m.Gateway)); err != nil {
		return err
	}

	if err := m.validateGatewayEnum("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateInvoiceID(formats strfmt.Registry) error {

	if err := validate.RequiredString("invoiceID", "body", string(m.InvoiceID)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateNominalValue(formats strfmt.Registry) error {

	if err := validate.Required("nominalValue", "body", float64(m.NominalValue)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.RequiredString("organizationID", "body", string(m.OrganizationID)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePaymentMethodID(formats strfmt.Registry) error {

	if err := validate.RequiredString("paymentMethodID", "body", string(m.PaymentMethodID)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateRefundID(formats strfmt.Registry) error {

	if err := validate.RequiredString("refundID", "body", string(m.RefundID)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateRefundedValue(formats strfmt.Registry) error {

	if err := validate.Required("refundedValue", "body", float64(m.RefundedValue)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateRemainingNominalValue(formats strfmt.Registry) error {

	if err := validate.Required("remainingNominalValue", "body", float64(m.RemainingNominalValue)); err != nil {
		return err
	}

	return nil
}

var paymentTypeEnum []interface{}

func (m *Payment) validateTypeEnum(path, location string, value string) error {
	if paymentTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["credit","debit"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			paymentTypeEnum = append(paymentTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, paymentTypeEnum); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
