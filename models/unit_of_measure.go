package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*UnitOfMeasure unit of measure

swagger:model UnitOfMeasure
*/
type UnitOfMeasure struct {

	/* Deleted deleted
	 */
	Deleted bool `json:"deleted,omitempty"`

	/* DisplayedAs displayed as

	Required: true
	*/
	DisplayedAs string `json:"displayedAs,omitempty"`

	/* ID id
	 */
	ID string `json:"id,omitempty"`

	/* Name name

	Required: true
	*/
	Name string `json:"name,omitempty"`

	/* OrganizationID organization ID
	 */
	OrganizationID string `json:"organizationID,omitempty"`

	/* Rounding rounding
	 */
	Rounding string `json:"rounding,omitempty"`
}

// Validate validates this unit of measure
func (m *UnitOfMeasure) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayedAs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnitOfMeasure) validateDisplayedAs(formats strfmt.Registry) error {

	if err := validate.Required("displayedAs", "body", string(m.DisplayedAs)); err != nil {
		return err
	}

	return nil
}

func (m *UnitOfMeasure) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}
