package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*PaymentMethod PaymentMethod

swagger:model PaymentMethod
*/
type PaymentMethod struct {

	/* { "description" : "Account associated with the payment-method.", "verbs":[] }

	Required: true
	*/
	Account *Account `json:"account,omitempty"`

	/* { "description" : "ID of the account associated with the payment-method.", "verbs":["POST","GET"] }

	Required: true
	*/
	AccountID string `json:"accountID,omitempty"`

	/* BillingEntity billing entity
	 */
	BillingEntity *string `json:"billingEntity,omitempty"`

	/* CardExpiry card expiry
	 */
	CardExpiry strfmt.DateTime `json:"cardExpiry,omitempty"`

	/* { "description" : "Name of the card holder", "verbs":["POST","PUT","GET"] }
	 */
	CardHolderName *string `json:"cardHolderName,omitempty"`

	/* { "description" : "Type of the card. In the case of card payment methods this is the payment type, for example VISA, MasterCard.", "verbs":["POST","GET"] }
	 */
	CardType *string `json:"cardType,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy *string `json:"changedBy,omitempty"`

	/* Country country
	 */
	Country *string `json:"country,omitempty"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* Crmid crmid
	 */
	Crmid *string `json:"crmid,omitempty"`

	/* {"default" : "false", "description" : "Indicates if this is the default payment method for the account.", "verbs":["GET","POST","PUT"]  }
	 */
	DefaultPaymentMethod *bool `json:"defaultPaymentMethod,omitempty"`

	/* {"default" : "false", "description" : "Indicates if a payment-method has been retired. If a payment-method has been retired it can still be retrieved using the appropriate flag on API requests. Generally payment-methods will be retired by customers wanting to remove the payment method from their account. Caution should be used when requested deleted payment methods.", "verbs":["GET"] }
	 */
	Deleted *bool `json:"deleted,omitempty"`

	/* { "description" : "Description of the payment-method.", "verbs":["POST","PUT","GET"] }
	 */
	Description *string `json:"description,omitempty"`

	/* { "description" : "In the case of card payment methods this is the expiry date of the card, format should be MMYY including leading 0's. For example 0115 for January 2015.", "verbs":["POST","GET"] }

	Required: true
	*/
	ExpiryDate string `json:"expiryDate,omitempty"`

	/* ExpiryMonth expiry month
	 */
	ExpiryMonth int32 `json:"expiryMonth,omitempty"`

	/* ExpiryYear expiry year
	 */
	ExpiryYear int32 `json:"expiryYear,omitempty"`

	/* FirstSix first six
	 */
	FirstSix *string `json:"firstSix,omitempty"`

	/* { "description" : "Gateway type for payment-method.", "verbs":["POST","GET"] }

	Required: true
	*/
	Gateway string `json:"gateway,omitempty"`

	/* { "description" : "", "verbs":["GET", "PUT"] }
	 */
	ID *string `json:"id,omitempty"`

	/* {"description":"IP address associated with this payment method.","verbs":["POST","PUT","GET"]}
	 */
	IPAddress *string `json:"ipAddress,omitempty"`

	/* {"description":"Country of the IP address associated with this payment method.","verbs":["POST","PUT","GET"]}
	 */
	IPAddressCountry *string `json:"ipAddressCountry,omitempty"`

	/* LastFour last four
	 */
	LastFour *string `json:"lastFour,omitempty"`

	/* LinkID link ID

	Required: true
	*/
	LinkID string `json:"linkID,omitempty"`

	/* { "description" : "Name of the payment-method.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Name string `json:"name,omitempty"`

	/* NotificationObjectGraph notification object graph
	 */
	NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

	/* OrganizationID organization ID
	 */
	OrganizationID *string `json:"organizationID,omitempty"`

	/* Province province
	 */
	Province *string `json:"province,omitempty"`

	/* { "description" : "State of the payment-method.", "verbs":["POST","GET"] }

	Required: true
	*/
	State string `json:"state,omitempty"`

	/* { "description" : "The UTC DateTime when the object was last updated. ", "verbs":[] }
	 */
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this payment method
func (m *PaymentMethod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAccountID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBillingEntity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpiryDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinkID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMethod) validateAccount(formats strfmt.Registry) error {

	if m.Account != nil {

		if err := m.Account.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PaymentMethod) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountID", "body", string(m.AccountID)); err != nil {
		return err
	}

	return nil
}

var paymentMethodBillingEntityEnum []interface{}

func (m *PaymentMethod) validateBillingEntityEnum(path, location string, value string) error {
	if paymentMethodBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			paymentMethodBillingEntityEnum = append(paymentMethodBillingEntityEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, paymentMethodBillingEntityEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentMethod) validateBillingEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingEntity) { // not required
		return nil
	}

	if err := m.validateBillingEntityEnum("billingEntity", "body", *m.BillingEntity); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateExpiryDate(formats strfmt.Registry) error {

	if err := validate.Required("expiryDate", "body", string(m.ExpiryDate)); err != nil {
		return err
	}

	return nil
}

var paymentMethodGatewayEnum []interface{}

func (m *PaymentMethod) validateGatewayEnum(path, location string, value string) error {
	if paymentMethodGatewayEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["cybersource_token","card_vault","paypal_simple","locustworld","free","coupon","credit_note","stripe","braintree","balanced","paypal","billforward_test","offline","trial","stripeACH","authorizeNet","spreedly","sagePay","trustCommerce","payvision","kash"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			paymentMethodGatewayEnum = append(paymentMethodGatewayEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, paymentMethodGatewayEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentMethod) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", string(m.Gateway)); err != nil {
		return err
	}

	if err := m.validateGatewayEnum("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateLinkID(formats strfmt.Registry) error {

	if err := validate.Required("linkID", "body", string(m.LinkID)); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

var paymentMethodStateEnum []interface{}

func (m *PaymentMethod) validateStateEnum(path, location string, value string) error {
	if paymentMethodStateEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Pending","Active","Expiring","Expired"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			paymentMethodStateEnum = append(paymentMethodStateEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, paymentMethodStateEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentMethod) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", string(m.State)); err != nil {
		return err
	}

	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}
