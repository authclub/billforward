package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*
An invoice-line represents the portion of an invoice specific to one particular pricing-component and its associated pricing-component-value.

swagger:model InvoiceLine
*/
type InvoiceLine struct {

	/* BillingEntity billing entity
	 */
	BillingEntity string `json:"billingEntity,omitempty"`

	/* { "description" : "A human readable explanation of how the value of the invoice-line was calculated.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Calculation string `json:"calculation,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy string `json:"changedBy,omitempty"`

	/* { "description" : "charge-type.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	ChargeType string `json:"chargeType,omitempty"`

	/* The ID of the invoice that is associated with the invoice-line.

	Required: true
	*/
	ChildInvoiceID string `json:"childInvoiceID,omitempty"`

	/* { "description" : "The component value for the unit-of-measure that is associated with the invoice-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	ComponentValue int32 `json:"componentValue,omitempty"`

	/* { "description" : "The cost of the invoice-line including tax.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Cost float64 `json:"cost,omitempty"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* { "description" : "The human readable description of the invoice-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Description string `json:"description,omitempty"`

	/* Discount discount
	 */
	Discount float64 `json:"discount,omitempty"`

	/* DiscountExcludingTax discount excluding tax
	 */
	DiscountExcludingTax float64 `json:"discountExcludingTax,omitempty"`

	/* { "description" : "ID of the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	ID string `json:"id,omitempty"`

	/* { "description" : "invoice associated with the invoice-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	InvoiceID string `json:"invoiceID,omitempty"`

	/* { "description" : "The human readable name of the invoice-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Name string `json:"name,omitempty"`

	/* NotificationObjectGraph notification object graph
	 */
	NotificationObjectGraph string `json:"notificationObjectGraph,omitempty"`

	/* { "description" : "ID of the organization associated with the invoice-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	OrganizationID string `json:"organizationID,omitempty"`

	/* The period end of the charge.

	Required: true
	*/
	PeriodEnd strfmt.DateTime `json:"periodEnd,omitempty"`

	/* The period start of the charge.

	Required: true
	*/
	PeriodStart strfmt.DateTime `json:"periodStart,omitempty"`

	/* The ID of the pricing-component that is associated with the invoice-line.

	Required: true
	*/
	PricingComponentID string `json:"pricingComponentID,omitempty"`

	/* The name of the pricing-component that is associated with the invoice-line.

	Required: true
	*/
	PricingComponentName string `json:"pricingComponentName,omitempty"`

	/* { "description" : "The type of the pricing component associated with the invoice line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	PricingComponentType string `json:"pricingComponentType,omitempty"`

	/* { "description" : "the product ID associated with the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	ProductID string `json:"productID,omitempty"`

	/* { "description" : "the product name associated with the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	ProductName string `json:"productName,omitempty"`

	/* { "description" : "the product rate plan ID associated with the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	ProductRatePlanID string `json:"productRatePlanID,omitempty"`

	/* { "description" : "the product rate plan name associated with the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	ProductRatePlanName string `json:"productRatePlanName,omitempty"`

	/* The ID of the subscription-charge that is associated with the invoice-line.

	Required: true
	*/
	SubscriptionChargeID string `json:"subscriptionChargeID,omitempty"`

	/* { "description" : "the subscription ID associated with the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	SubscriptionID string `json:"subscriptionID,omitempty"`

	/* { "description" : "The cumulative tax of the invoice-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Tax float64 `json:"tax,omitempty"`

	/* The type of the invoice-line.

	Required: true
	*/
	Type string `json:"type,omitempty"`

	/* { "description" : "The unit-of-measure associated with the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	UnitOfMeasure *MutableBillingEntity `json:"unitOfMeasure,omitempty"`

	/* { "description" : "unit-of-measure associated with the invoice-line.", "verbs":["POST","PUT","GET"] }
	 */
	UnitOfMeasureID string `json:"unitOfMeasureID,omitempty"`

	/* { "description" : "The UTC DateTime when the object was last updated. ", "verbs":[] }
	 */
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this invoice line
func (m *InvoiceLine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildInvoiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingComponentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingComponentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingComponentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionChargeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var invoiceLineBillingEntityEnum []interface{}

func (m *InvoiceLine) validateBillingEntityEnum(path, location string, value string) error {
	if invoiceLineBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			invoiceLineBillingEntityEnum = append(invoiceLineBillingEntityEnum, v)
		}
	}
	return validate.Enum(path, location, value, invoiceLineBillingEntityEnum)
}

func (m *InvoiceLine) validateBillingEntity(formats strfmt.Registry) error {

	if err := m.validateBillingEntityEnum("billingEntity", "body", m.BillingEntity); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateCalculation(formats strfmt.Registry) error {

	if err := validate.Required("calculation", "body", string(m.Calculation)); err != nil {
		return err
	}

	return nil
}

var invoiceLineChargeTypeEnum []interface{}

func (m *InvoiceLine) validateChargeTypeEnum(path, location string, value string) error {
	if invoiceLineChargeTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Credit","Debit"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			invoiceLineChargeTypeEnum = append(invoiceLineChargeTypeEnum, v)
		}
	}
	return validate.Enum(path, location, value, invoiceLineChargeTypeEnum)
}

func (m *InvoiceLine) validateChargeType(formats strfmt.Registry) error {

	if err := validate.Required("chargeType", "body", string(m.ChargeType)); err != nil {
		return err
	}

	if err := m.validateChargeTypeEnum("chargeType", "body", m.ChargeType); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateChildInvoiceID(formats strfmt.Registry) error {

	if err := validate.Required("childInvoiceID", "body", string(m.ChildInvoiceID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateComponentValue(formats strfmt.Registry) error {

	if err := validate.Required("componentValue", "body", int32(m.ComponentValue)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateCost(formats strfmt.Registry) error {

	if err := validate.Required("cost", "body", float64(m.Cost)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateInvoiceID(formats strfmt.Registry) error {

	if err := validate.Required("invoiceID", "body", string(m.InvoiceID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", string(m.OrganizationID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validatePeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("periodEnd", "body", strfmt.DateTime(m.PeriodEnd)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validatePeriodStart(formats strfmt.Registry) error {

	if err := validate.Required("periodStart", "body", strfmt.DateTime(m.PeriodStart)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validatePricingComponentID(formats strfmt.Registry) error {

	if err := validate.Required("pricingComponentID", "body", string(m.PricingComponentID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validatePricingComponentName(formats strfmt.Registry) error {

	if err := validate.Required("pricingComponentName", "body", string(m.PricingComponentName)); err != nil {
		return err
	}

	return nil
}

var invoiceLinePricingComponentTypeEnum []interface{}

func (m *InvoiceLine) validatePricingComponentTypeEnum(path, location string, value string) error {
	if invoiceLinePricingComponentTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["setup","subscription","arrears","usage"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			invoiceLinePricingComponentTypeEnum = append(invoiceLinePricingComponentTypeEnum, v)
		}
	}
	return validate.Enum(path, location, value, invoiceLinePricingComponentTypeEnum)
}

func (m *InvoiceLine) validatePricingComponentType(formats strfmt.Registry) error {

	if err := validate.Required("pricingComponentType", "body", string(m.PricingComponentType)); err != nil {
		return err
	}

	if err := m.validatePricingComponentTypeEnum("pricingComponentType", "body", m.PricingComponentType); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateSubscriptionChargeID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionChargeID", "body", string(m.SubscriptionChargeID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceLine) validateTax(formats strfmt.Registry) error {

	if err := validate.Required("tax", "body", float64(m.Tax)); err != nil {
		return err
	}

	return nil
}

var invoiceLineTypeEnum []interface{}

func (m *InvoiceLine) validateTypeEnum(path, location string, value string) error {
	if invoiceLineTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["PricingComponent","Coupon","Migration","AggregatedInvoice"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			invoiceLineTypeEnum = append(invoiceLineTypeEnum, v)
		}
	}
	return validate.Enum(path, location, value, invoiceLineTypeEnum)
}

func (m *InvoiceLine) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", string(m.Type)); err != nil {
		return err
	}

	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
