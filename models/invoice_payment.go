package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*
An invoice-payment specifies the amount of a particular payment used to pay part or entirety of the outstanding balance of the associated invoice.

swagger:model InvoicePayment
*/
type InvoicePayment struct {

	/* { "description" : "The value of the payment used by payment-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	ActualAmount float64 `json:"actualAmount,omitempty"`

	/* BillingEntity billing entity
	 */
	BillingEntity string `json:"billingEntity,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy string `json:"changedBy,omitempty"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* Crmid crmid
	 */
	Crmid string `json:"crmid,omitempty"`

	/* { "description" : "The currency of the payment specified by a three character ISO 4217 currency code.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Currency string `json:"currency,omitempty"`

	/* Payment gateway associated with the payment

	Required: true
	*/
	Gateway string `json:"gateway,omitempty"`

	/* { "description" : "ID of the payment-line.", "verbs":["POST","PUT","GET"] }
	 */
	ID string `json:"id,omitempty"`

	/* { "description" : "ID of the invoice associated with the payment-line.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	InvoiceID string `json:"invoiceID,omitempty"`

	/* { "description" : "The value that this payment-line represents.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	NominalAmount float64 `json:"nominalAmount,omitempty"`

	/* NotificationObjectGraph notification object graph
	 */
	NotificationObjectGraph string `json:"notificationObjectGraph,omitempty"`

	/* { "description" : "ID of the organization associated with the invoice-payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	OrganizationID string `json:"organizationID,omitempty"`

	/* { "description" : "ID of the payment used.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	PaymentID string `json:"paymentID,omitempty"`

	/* {"description":"The date when the associated payment was received.","verbs":["POST","PUT","GET"]}

	Required: true
	*/
	PaymentReceived strfmt.DateTime `json:"paymentReceived,omitempty"`

	/* {"description":"The date when the associated payment was refunded.","verbs":["POST","PUT","GET"]}

	Required: true
	*/
	RefundReceived strfmt.DateTime `json:"refundReceived,omitempty"`

	/* { "description" : "The refunded amount of the invoice-payment.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	RefundedAmount float64 `json:"refundedAmount,omitempty"`

	/* { "description" : "The UTC DateTime when the object was last updated. ", "verbs":[] }
	 */
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this invoice payment
func (m *InvoicePayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNominalAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentReceived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundReceived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundedAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicePayment) validateActualAmount(formats strfmt.Registry) error {

	if err := validate.Required("actualAmount", "body", float64(m.ActualAmount)); err != nil {
		return err
	}

	return nil
}

var invoicePaymentBillingEntityEnum []interface{}

func (m *InvoicePayment) validateBillingEntityEnum(path, location string, value string) error {
	if invoicePaymentBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			invoicePaymentBillingEntityEnum = append(invoicePaymentBillingEntityEnum, v)
		}
	}
	return validate.Enum(path, location, value, invoicePaymentBillingEntityEnum)
}

func (m *InvoicePayment) validateBillingEntity(formats strfmt.Registry) error {

	if err := m.validateBillingEntityEnum("billingEntity", "body", m.BillingEntity); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", string(m.Currency)); err != nil {
		return err
	}

	return nil
}

var invoicePaymentGatewayEnum []interface{}

func (m *InvoicePayment) validateGatewayEnum(path, location string, value string) error {
	if invoicePaymentGatewayEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["cybersource_token","card_vault","paypal_simple","locustworld","free","coupon","credit_note","stripe","braintree","balanced","paypal","billforward_test","offline","trial","stripeACH","authorizeNet","spreedly","sagePay","trustCommerce","payvision","kash"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			invoicePaymentGatewayEnum = append(invoicePaymentGatewayEnum, v)
		}
	}
	return validate.Enum(path, location, value, invoicePaymentGatewayEnum)
}

func (m *InvoicePayment) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", string(m.Gateway)); err != nil {
		return err
	}

	if err := m.validateGatewayEnum("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateInvoiceID(formats strfmt.Registry) error {

	if err := validate.Required("invoiceID", "body", string(m.InvoiceID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateNominalAmount(formats strfmt.Registry) error {

	if err := validate.Required("nominalAmount", "body", float64(m.NominalAmount)); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", string(m.OrganizationID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validatePaymentID(formats strfmt.Registry) error {

	if err := validate.Required("paymentID", "body", string(m.PaymentID)); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validatePaymentReceived(formats strfmt.Registry) error {

	if err := validate.Required("paymentReceived", "body", strfmt.DateTime(m.PaymentReceived)); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateRefundReceived(formats strfmt.Registry) error {

	if err := validate.Required("refundReceived", "body", strfmt.DateTime(m.RefundReceived)); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateRefundedAmount(formats strfmt.Registry) error {

	if err := validate.Required("refundedAmount", "body", float64(m.RefundedAmount)); err != nil {
		return err
	}

	return nil
}
