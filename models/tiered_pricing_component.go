package models

import (
	"encoding/json"
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

/*tieredPricingComponent TieredPricingComponent tiered pricing component

swagger:model tieredPricingComponent
*/
type TieredPricingComponent struct {
	billingEntityField *string

	changedByField *string

	chargeModelField string

	chargeTypeField string

	componentValueField int32

	consistentIdField string

	costField *float64

	createdField strfmt.DateTime

	crmidField *string

	defaultQuantityField int32

	descriptionField *string

	downgradeModeField *string

	idField *string

	invoicingTypeField *string

	maxQuantityField int32

	minQuantityField int32

	nameField string

	notificationObjectGraphField *string

	organizationIdField string

	priceExplanationField []string

	priceExplanationStringField *string

	productRatePlanField *ProductRatePlan

	productRatePlanIdField string

	publicNameField *string

	tiersField []*PricingComponentTier

	unitOfMeasureIdField string

	updatedField strfmt.DateTime

	upgradeModeField *string

	validFromField strfmt.DateTime

	validTillField strfmt.DateTime
}

func (m *TieredPricingComponent) Type() string {
	return "tieredPricingComponent"
}
func (m *TieredPricingComponent) SetType(val string) {

}

func (m *TieredPricingComponent) BillingEntity() *string {
	return m.billingEntityField
}
func (m *TieredPricingComponent) SetBillingEntity(val *string) {
	m.billingEntityField = val
}

func (m *TieredPricingComponent) ChangedBy() *string {
	return m.changedByField
}
func (m *TieredPricingComponent) SetChangedBy(val *string) {
	m.changedByField = val
}

func (m *TieredPricingComponent) ChargeModel() string {
	return m.chargeModelField
}
func (m *TieredPricingComponent) SetChargeModel(val string) {
	m.chargeModelField = val
}

func (m *TieredPricingComponent) ChargeType() string {
	return m.chargeTypeField
}
func (m *TieredPricingComponent) SetChargeType(val string) {
	m.chargeTypeField = val
}

func (m *TieredPricingComponent) ComponentValue() int32 {
	return m.componentValueField
}
func (m *TieredPricingComponent) SetComponentValue(val int32) {
	m.componentValueField = val
}

func (m *TieredPricingComponent) ConsistentID() string {
	return m.consistentIdField
}
func (m *TieredPricingComponent) SetConsistentID(val string) {
	m.consistentIdField = val
}

func (m *TieredPricingComponent) Cost() *float64 {
	return m.costField
}
func (m *TieredPricingComponent) SetCost(val *float64) {
	m.costField = val
}

func (m *TieredPricingComponent) Created() strfmt.DateTime {
	return m.createdField
}
func (m *TieredPricingComponent) SetCreated(val strfmt.DateTime) {
	m.createdField = val
}

func (m *TieredPricingComponent) Crmid() *string {
	return m.crmidField
}
func (m *TieredPricingComponent) SetCrmid(val *string) {
	m.crmidField = val
}

func (m *TieredPricingComponent) DefaultQuantity() int32 {
	return m.defaultQuantityField
}
func (m *TieredPricingComponent) SetDefaultQuantity(val int32) {
	m.defaultQuantityField = val
}

func (m *TieredPricingComponent) Description() *string {
	return m.descriptionField
}
func (m *TieredPricingComponent) SetDescription(val *string) {
	m.descriptionField = val
}

func (m *TieredPricingComponent) DowngradeMode() *string {
	return m.downgradeModeField
}
func (m *TieredPricingComponent) SetDowngradeMode(val *string) {
	m.downgradeModeField = val
}

func (m *TieredPricingComponent) ID() *string {
	return m.idField
}
func (m *TieredPricingComponent) SetID(val *string) {
	m.idField = val
}

func (m *TieredPricingComponent) InvoicingType() *string {
	return m.invoicingTypeField
}
func (m *TieredPricingComponent) SetInvoicingType(val *string) {
	m.invoicingTypeField = val
}

func (m *TieredPricingComponent) MaxQuantity() int32 {
	return m.maxQuantityField
}
func (m *TieredPricingComponent) SetMaxQuantity(val int32) {
	m.maxQuantityField = val
}

func (m *TieredPricingComponent) MinQuantity() int32 {
	return m.minQuantityField
}
func (m *TieredPricingComponent) SetMinQuantity(val int32) {
	m.minQuantityField = val
}

func (m *TieredPricingComponent) Name() string {
	return m.nameField
}
func (m *TieredPricingComponent) SetName(val string) {
	m.nameField = val
}

func (m *TieredPricingComponent) NotificationObjectGraph() *string {
	return m.notificationObjectGraphField
}
func (m *TieredPricingComponent) SetNotificationObjectGraph(val *string) {
	m.notificationObjectGraphField = val
}

func (m *TieredPricingComponent) OrganizationID() string {
	return m.organizationIdField
}
func (m *TieredPricingComponent) SetOrganizationID(val string) {
	m.organizationIdField = val
}

func (m *TieredPricingComponent) PriceExplanation() []string {
	return m.priceExplanationField
}
func (m *TieredPricingComponent) SetPriceExplanation(val []string) {
	m.priceExplanationField = val
}

func (m *TieredPricingComponent) PriceExplanationString() *string {
	return m.priceExplanationStringField
}
func (m *TieredPricingComponent) SetPriceExplanationString(val *string) {
	m.priceExplanationStringField = val
}

func (m *TieredPricingComponent) ProductRatePlan() *ProductRatePlan {
	return m.productRatePlanField
}
func (m *TieredPricingComponent) SetProductRatePlan(val *ProductRatePlan) {
	m.productRatePlanField = val
}

func (m *TieredPricingComponent) ProductRatePlanID() string {
	return m.productRatePlanIdField
}
func (m *TieredPricingComponent) SetProductRatePlanID(val string) {
	m.productRatePlanIdField = val
}

func (m *TieredPricingComponent) PublicName() *string {
	return m.publicNameField
}
func (m *TieredPricingComponent) SetPublicName(val *string) {
	m.publicNameField = val
}

func (m *TieredPricingComponent) Tiers() []*PricingComponentTier {
	return m.tiersField
}
func (m *TieredPricingComponent) SetTiers(val []*PricingComponentTier) {
	m.tiersField = val
}

func (m *TieredPricingComponent) UnitOfMeasureID() string {
	return m.unitOfMeasureIdField
}
func (m *TieredPricingComponent) SetUnitOfMeasureID(val string) {
	m.unitOfMeasureIdField = val
}

func (m *TieredPricingComponent) Updated() strfmt.DateTime {
	return m.updatedField
}
func (m *TieredPricingComponent) SetUpdated(val strfmt.DateTime) {
	m.updatedField = val
}

func (m *TieredPricingComponent) UpgradeMode() *string {
	return m.upgradeModeField
}
func (m *TieredPricingComponent) SetUpgradeMode(val *string) {
	m.upgradeModeField = val
}

func (m *TieredPricingComponent) ValidFrom() strfmt.DateTime {
	return m.validFromField
}
func (m *TieredPricingComponent) SetValidFrom(val strfmt.DateTime) {
	m.validFromField = val
}

func (m *TieredPricingComponent) ValidTill() strfmt.DateTime {
	return m.validTillField
}
func (m *TieredPricingComponent) SetValidTill(val strfmt.DateTime) {
	m.validTillField = val
}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *TieredPricingComponent) UnmarshalJSON(raw []byte) error {
	var data struct {
		Type string `json:"@type,omitempty"`

		BillingEntity *string `json:"billingEntity,omitempty"`

		ChangedBy *string `json:"changedBy,omitempty"`

		ChargeModel string `json:"chargeModel,omitempty"`

		ChargeType string `json:"chargeType,omitempty"`

		ComponentValue int32 `json:"componentValue,omitempty"`

		ConsistentID string `json:"consistentID,omitempty" xml:"id"`

		Cost *float64 `json:"cost,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`

		Crmid *string `json:"crmid,omitempty"`

		DefaultQuantity int32 `json:"defaultQuantity,omitempty"`

		Description *string `json:"description,omitempty"`

		DowngradeMode *string `json:"downgradeMode,omitempty"`

		ID *string `json:"id,omitempty" xml:"versionID"`

		InvoicingType *string `json:"invoicingType,omitempty"`

		MaxQuantity int32 `json:"maxQuantity,omitempty"`

		MinQuantity int32 `json:"minQuantity,omitempty"`

		Name string `json:"name,omitempty"`

		NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

		OrganizationID string `json:"organizationID,omitempty"`

		PriceExplanation []string `json:"priceExplanation,omitempty"`

		PriceExplanationString *string `json:"priceExplanationString,omitempty"`

		ProductRatePlan *ProductRatePlan `json:"productRatePlan,omitempty"`

		ProductRatePlanID string `json:"productRatePlanID,omitempty"`

		PublicName *string `json:"publicName,omitempty"`

		Tiers []*PricingComponentTier `json:"tiers,omitempty"`

		UnitOfMeasureID string `json:"unitOfMeasureID,omitempty"`

		Updated strfmt.DateTime `json:"updated,omitempty"`

		UpgradeMode *string `json:"upgradeMode,omitempty"`

		ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

		ValidTill strfmt.DateTime `json:"validTill,omitempty"`
	}

	if err := json.Unmarshal(raw, &data); err != nil {
		return err
	}

	m.billingEntityField = data.BillingEntity
	m.changedByField = data.ChangedBy
	m.chargeModelField = data.ChargeModel
	m.chargeTypeField = data.ChargeType
	m.componentValueField = data.ComponentValue
	m.consistentIdField = data.ConsistentID
	m.costField = data.Cost
	m.createdField = data.Created
	m.crmidField = data.Crmid
	m.defaultQuantityField = data.DefaultQuantity
	m.descriptionField = data.Description
	m.downgradeModeField = data.DowngradeMode
	m.idField = data.ID
	m.invoicingTypeField = data.InvoicingType
	m.maxQuantityField = data.MaxQuantity
	m.minQuantityField = data.MinQuantity
	m.nameField = data.Name
	m.notificationObjectGraphField = data.NotificationObjectGraph
	m.organizationIdField = data.OrganizationID
	m.priceExplanationField = data.PriceExplanation
	m.priceExplanationStringField = data.PriceExplanationString
	m.productRatePlanField = data.ProductRatePlan
	m.productRatePlanIdField = data.ProductRatePlanID
	m.publicNameField = data.PublicName
	m.tiersField = data.Tiers
	m.unitOfMeasureIdField = data.UnitOfMeasureID
	m.updatedField = data.Updated
	m.upgradeModeField = data.UpgradeMode
	m.validFromField = data.ValidFrom
	m.validTillField = data.ValidTill

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m TieredPricingComponent) MarshalJSON() ([]byte, error) {
	var data struct {
		Type string `json:"@type,omitempty"`

		BillingEntity *string `json:"billingEntity,omitempty"`

		ChangedBy *string `json:"changedBy,omitempty"`

		ChargeModel string `json:"chargeModel,omitempty"`

		ChargeType string `json:"chargeType,omitempty"`

		ComponentValue int32 `json:"componentValue,omitempty"`

		ConsistentID string `json:"consistentID,omitempty" xml:"id"`

		Cost *float64 `json:"cost,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`

		Crmid *string `json:"crmid,omitempty"`

		DefaultQuantity int32 `json:"defaultQuantity,omitempty"`

		Description *string `json:"description,omitempty"`

		DowngradeMode *string `json:"downgradeMode,omitempty"`

		ID *string `json:"id,omitempty" xml:"versionID"`

		InvoicingType *string `json:"invoicingType,omitempty"`

		MaxQuantity int32 `json:"maxQuantity,omitempty"`

		MinQuantity int32 `json:"minQuantity,omitempty"`

		Name string `json:"name,omitempty"`

		NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

		OrganizationID string `json:"organizationID,omitempty"`

		PriceExplanation []string `json:"priceExplanation,omitempty"`

		PriceExplanationString *string `json:"priceExplanationString,omitempty"`

		ProductRatePlan *ProductRatePlan `json:"productRatePlan,omitempty"`

		ProductRatePlanID string `json:"productRatePlanID,omitempty"`

		PublicName *string `json:"publicName,omitempty"`

		Tiers []*PricingComponentTier `json:"tiers,omitempty"`

		UnitOfMeasureID string `json:"unitOfMeasureID,omitempty"`

		Updated strfmt.DateTime `json:"updated,omitempty"`

		UpgradeMode *string `json:"upgradeMode,omitempty"`

		ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

		ValidTill strfmt.DateTime `json:"validTill,omitempty"`
	}

	data.BillingEntity = m.billingEntityField
	data.ChangedBy = m.changedByField
	data.ChargeModel = m.chargeModelField
	data.ChargeType = m.chargeTypeField
	data.ComponentValue = m.componentValueField
	data.ConsistentID = m.consistentIdField
	data.Cost = m.costField
	data.Created = m.createdField
	data.Crmid = m.crmidField
	data.DefaultQuantity = m.defaultQuantityField
	data.Description = m.descriptionField
	data.DowngradeMode = m.downgradeModeField
	data.ID = m.idField
	data.InvoicingType = m.invoicingTypeField
	data.MaxQuantity = m.maxQuantityField
	data.MinQuantity = m.minQuantityField
	data.Name = m.nameField
	data.NotificationObjectGraph = m.notificationObjectGraphField
	data.OrganizationID = m.organizationIdField
	data.PriceExplanation = m.priceExplanationField
	data.PriceExplanationString = m.priceExplanationStringField
	data.ProductRatePlan = m.productRatePlanField
	data.ProductRatePlanID = m.productRatePlanIdField
	data.PublicName = m.publicNameField
	data.Tiers = m.tiersField
	data.UnitOfMeasureID = m.unitOfMeasureIdField
	data.Updated = m.updatedField
	data.UpgradeMode = m.upgradeModeField
	data.ValidFrom = m.validFromField
	data.ValidTill = m.validTillField
	data.Type = "tieredPricingComponent"
	return json.Marshal(data)
}

// Validate validates this tiered pricing component
func (m *TieredPricingComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDowngradeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoicingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceExplanation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductRatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductRatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasureID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tieredPricingComponentBillingEntityEnum []interface{}

func (m *TieredPricingComponent) validateBillingEntityEnum(path, location string, value string) error {
	if tieredPricingComponentBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredPricingComponentBillingEntityEnum = append(tieredPricingComponentBillingEntityEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredPricingComponentBillingEntityEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredPricingComponent) validateBillingEntity(formats strfmt.Registry) error {

	if err := m.validateBillingEntityEnum("billingEntity", "body", *m.BillingEntity()); err != nil {
		return err
	}

	return nil
}

var tieredPricingComponentChargeModelEnum []interface{}

func (m *TieredPricingComponent) validateChargeModelEnum(path, location string, value string) error {
	if tieredPricingComponentChargeModelEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["flat","tiered","tiered_volume"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredPricingComponentChargeModelEnum = append(tieredPricingComponentChargeModelEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredPricingComponentChargeModelEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredPricingComponent) validateChargeModel(formats strfmt.Registry) error {

	if err := validate.Required("chargeModel", "body", string(m.ChargeModel())); err != nil {
		return err
	}

	if err := m.validateChargeModelEnum("chargeModel", "body", m.ChargeModel()); err != nil {
		return err
	}

	return nil
}

var tieredPricingComponentChargeTypeEnum []interface{}

func (m *TieredPricingComponent) validateChargeTypeEnum(path, location string, value string) error {
	if tieredPricingComponentChargeTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["setup","subscription","arrears","usage"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredPricingComponentChargeTypeEnum = append(tieredPricingComponentChargeTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredPricingComponentChargeTypeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredPricingComponent) validateChargeType(formats strfmt.Registry) error {

	if err := validate.Required("chargeType", "body", string(m.ChargeType())); err != nil {
		return err
	}

	if err := m.validateChargeTypeEnum("chargeType", "body", m.ChargeType()); err != nil {
		return err
	}

	return nil
}

func (m *TieredPricingComponent) validateConsistentID(formats strfmt.Registry) error {

	if err := validate.Required("consistentID", "body", string(m.ConsistentID())); err != nil {
		return err
	}

	return nil
}

func (m *TieredPricingComponent) validateDefaultQuantity(formats strfmt.Registry) error {

	if err := validate.Required("defaultQuantity", "body", int32(m.DefaultQuantity())); err != nil {
		return err
	}

	return nil
}

var tieredPricingComponentDowngradeModeEnum []interface{}

func (m *TieredPricingComponent) validateDowngradeModeEnum(path, location string, value string) error {
	if tieredPricingComponentDowngradeModeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredPricingComponentDowngradeModeEnum = append(tieredPricingComponentDowngradeModeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredPricingComponentDowngradeModeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredPricingComponent) validateDowngradeMode(formats strfmt.Registry) error {

	if err := m.validateDowngradeModeEnum("downgradeMode", "body", *m.DowngradeMode()); err != nil {
		return err
	}

	return nil
}

var tieredPricingComponentInvoicingTypeEnum []interface{}

func (m *TieredPricingComponent) validateInvoicingTypeEnum(path, location string, value string) error {
	if tieredPricingComponentInvoicingTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Immediate","Aggregated"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredPricingComponentInvoicingTypeEnum = append(tieredPricingComponentInvoicingTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredPricingComponentInvoicingTypeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredPricingComponent) validateInvoicingType(formats strfmt.Registry) error {

	if err := m.validateInvoicingTypeEnum("invoicingType", "body", *m.InvoicingType()); err != nil {
		return err
	}

	return nil
}

func (m *TieredPricingComponent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", string(m.Name())); err != nil {
		return err
	}

	return nil
}

func (m *TieredPricingComponent) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", string(m.OrganizationID())); err != nil {
		return err
	}

	return nil
}

func (m *TieredPricingComponent) validatePriceExplanation(formats strfmt.Registry) error {

	for i := 0; i < len(m.PriceExplanation()); i++ {

		if err := validate.Required("priceExplanation"+"."+strconv.Itoa(i), "body", string(m.priceExplanationField[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *TieredPricingComponent) validateProductRatePlan(formats strfmt.Registry) error {

	if m.ProductRatePlan() != nil {

		if err := m.ProductRatePlan().Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *TieredPricingComponent) validateProductRatePlanID(formats strfmt.Registry) error {

	if err := validate.Required("productRatePlanID", "body", string(m.ProductRatePlanID())); err != nil {
		return err
	}

	return nil
}

func (m *TieredPricingComponent) validateTiers(formats strfmt.Registry) error {

	for i := 0; i < len(m.Tiers()); i++ {

		if m.tiersField[i] != nil {

			if err := m.tiersField[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TieredPricingComponent) validateUnitOfMeasureID(formats strfmt.Registry) error {

	if err := validate.Required("unitOfMeasureID", "body", string(m.UnitOfMeasureID())); err != nil {
		return err
	}

	return nil
}

var tieredPricingComponentUpgradeModeEnum []interface{}

func (m *TieredPricingComponent) validateUpgradeModeEnum(path, location string, value string) error {
	if tieredPricingComponentUpgradeModeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredPricingComponentUpgradeModeEnum = append(tieredPricingComponentUpgradeModeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredPricingComponentUpgradeModeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredPricingComponent) validateUpgradeMode(formats strfmt.Registry) error {

	if err := m.validateUpgradeModeEnum("upgradeMode", "body", *m.UpgradeMode()); err != nil {
		return err
	}

	return nil
}

func (m *TieredPricingComponent) validateValidFrom(formats strfmt.Registry) error {

	if err := validate.Required("validFrom", "body", strfmt.DateTime(m.ValidFrom())); err != nil {
		return err
	}

	return nil
}
