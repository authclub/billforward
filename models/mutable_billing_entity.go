package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*MutableBillingEntity Mutable entities are those entities that can be updated after their initial creation.

swagger:model MutableBillingEntity
*/
type MutableBillingEntity struct {

	/* AppliedAt applied at
	 */
	AppliedAt *string `json:"appliedAt,omitempty"`

	/* BillingEntity billing entity
	 */
	BillingEntity *string `json:"billingEntity,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy *string `json:"changedBy,omitempty"`

	/* { "description" : "", "verbs":["POST","GET"] }

	Required: true
	*/
	Country string `json:"country,omitempty"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* { "description" : "Currency this tax applies to specified by a three character ISO 4217 currency code", "verbs":["POST","GET"] }

	Required: true
	*/
	Currency string `json:"currency,omitempty"`

	/* { "default" : "false", "description" : "Indicates if this is the default taxation for any rate-plans which do not have a tax explicitly defined", "verbs":["POST","PUT","GET"] }
	 */
	DefaultTaxationStrategy *bool `json:"defaultTaxationStrategy,omitempty"`

	/* {  "default" : "false", "description" : "", "verbs":[] }

	Required: true
	*/
	Deleted bool `json:"deleted,omitempty"`

	/* { "description" : "", "verbs":["GET", "PUT"] }

	Required: true
	*/
	ID string `json:"id,omitempty"`

	/* { "PUT_description" : "Not required for update, updates the tax change which has validTill of null (unbounded) with the matching name", "description" : "", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Name string `json:"name,omitempty"`

	/* NotificationObjectGraph notification object graph
	 */
	NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

	/* Organization organization
	 */
	Organization *Organization `json:"organization,omitempty"`

	/* { "description" : "", "verbs":[] }
	 */
	OrganizationID *string `json:"organizationID,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Percentage float64 `json:"percentage,omitempty"`

	/* { "description" : "State/Province to apply this tax to, only used set when creating a localized tax.", "verbs":["POST","GET"] }
	 */
	Province *string `json:"province,omitempty"`

	/* { "description" : "The UTC DateTime when the object was last updated. ", "verbs":[] }
	 */
	Updated strfmt.DateTime `json:"updated,omitempty"`

	/* {  "default" : "immediately", "description" : "UTC DateTime from which the tax applies", "verbs":["POST","GET"] }

	Required: true
	*/
	ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

	/* {   "default" : "&infin;",  "description" : "UTC DateTime after which the tax no longer applies. This is automatically set by the API on creation of a tax strategy that supersedes the current tax version", "verbs":["GET"] }
	 */
	ValidTill strfmt.DateTime `json:"validTill,omitempty"`

	/* { "PUT_description" : "If specified update this tax version", "description" : "", "verbs":["GET", "PUT"] }
	 */
	VersionID *string `json:"versionID,omitempty"`
}

// Validate validates this mutable billing entity
func (m *MutableBillingEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBillingEntity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePercentage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mutableBillingEntityAppliedAtEnum []interface{}

func (m *MutableBillingEntity) validateAppliedAtEnum(path, location string, value string) error {
	if mutableBillingEntityAppliedAtEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["checkout","immediate"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			mutableBillingEntityAppliedAtEnum = append(mutableBillingEntityAppliedAtEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, mutableBillingEntityAppliedAtEnum); err != nil {
		return err
	}
	return nil
}

func (m *MutableBillingEntity) validateAppliedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.AppliedAt) { // not required
		return nil
	}

	if err := m.validateAppliedAtEnum("appliedAt", "body", *m.AppliedAt); err != nil {
		return err
	}

	return nil
}

var mutableBillingEntityBillingEntityEnum []interface{}

func (m *MutableBillingEntity) validateBillingEntityEnum(path, location string, value string) error {
	if mutableBillingEntityBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			mutableBillingEntityBillingEntityEnum = append(mutableBillingEntityBillingEntityEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, mutableBillingEntityBillingEntityEnum); err != nil {
		return err
	}
	return nil
}

func (m *MutableBillingEntity) validateBillingEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingEntity) { // not required
		return nil
	}

	if err := m.validateBillingEntityEnum("billingEntity", "body", *m.BillingEntity); err != nil {
		return err
	}

	return nil
}

var mutableBillingEntityCountryEnum []interface{}

func (m *MutableBillingEntity) validateCountryEnum(path, location string, value string) error {
	if mutableBillingEntityCountryEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["UK","USA","Canada","Mexico","Brazil","Argentina","China","France","Germany","Ireland"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			mutableBillingEntityCountryEnum = append(mutableBillingEntityCountryEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, mutableBillingEntityCountryEnum); err != nil {
		return err
	}
	return nil
}

func (m *MutableBillingEntity) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", string(m.Country)); err != nil {
		return err
	}

	if err := m.validateCountryEnum("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", string(m.Currency)); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", bool(m.Deleted)); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validatePercentage(formats strfmt.Registry) error {

	if err := validate.Required("percentage", "body", float64(m.Percentage)); err != nil {
		return err
	}

	return nil
}

func (m *MutableBillingEntity) validateValidFrom(formats strfmt.Registry) error {

	if err := validate.Required("validFrom", "body", strfmt.DateTime(m.ValidFrom)); err != nil {
		return err
	}

	return nil
}
