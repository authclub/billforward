package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*Receipt Receipt

swagger:model Receipt
*/
type Receipt struct {

	/* AccountID account ID
	 */
	AccountID *string `json:"accountID,omitempty"`

	/* BillingEntity billing entity
	 */
	BillingEntity *string `json:"billingEntity,omitempty"`

	/* CardCountry card country
	 */
	CardCountry *string `json:"cardCountry,omitempty"`

	/* CardDescription card description
	 */
	CardDescription *string `json:"cardDescription,omitempty"`

	/* CardLastFour card last four
	 */
	CardLastFour *string `json:"cardLastFour,omitempty"`

	/* CardProvince card province
	 */
	CardProvince *string `json:"cardProvince,omitempty"`

	/* CardType card type
	 */
	CardType *string `json:"cardType,omitempty"`

	/* CardholderName cardholder name
	 */
	CardholderName *string `json:"cardholderName,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy *string `json:"changedBy,omitempty"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* Crmid crmid
	 */
	Crmid *string `json:"crmid,omitempty"`

	/* { "description" : "Currency of the invoice specified by a three character ISO 4217 currency code.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Currency string `json:"currency,omitempty"`

	/* Decision decision
	 */
	Decision *string `json:"decision,omitempty"`

	/* ExecutionAttempt execution attempt
	 */
	ExecutionAttempt int32 `json:"executionAttempt,omitempty"`

	/* Fields fields
	 */
	Fields map[string]string `json:"fields,omitempty"`

	/* GatewayReferenceID gateway reference ID
	 */
	GatewayReferenceID *string `json:"gatewayReferenceID,omitempty"`

	/* { "description" : "", "verbs":["GET", "PUT"] }
	 */
	ID *string `json:"id,omitempty"`

	/* InvoiceID invoice ID
	 */
	InvoiceID *string `json:"invoiceID,omitempty"`

	/* { "description" : "The type of the invoice. A subscription invoice is raised every time a subscription recurs. An amendment is created for intra-contract changes. An Adhoc invoice is created for payment that is taken out-of-band of a subscription. Finally the invoice generated for a trial period is marked as Trial.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	InvoiceType string `json:"invoiceType,omitempty"`

	/* {"description":"IP address associated with this payment method.","verbs":["POST","PUT","GET"]}
	 */
	IPAddress *string `json:"ipAddress,omitempty"`

	/* {"description":"Country of the IP address associated with this payment method.","verbs":["POST","PUT","GET"]}
	 */
	IPAddressCountry *string `json:"ipAddressCountry,omitempty"`

	/* NotificationObjectGraph notification object graph
	 */
	NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

	/* OrganizationID organization ID
	 */
	OrganizationID *string `json:"organizationID,omitempty"`

	/* PaymentGateway payment gateway
	 */
	PaymentGateway *string `json:"paymentGateway,omitempty"`

	/* PaymentID payment ID
	 */
	PaymentID *string `json:"paymentID,omitempty"`

	/* PaymentMethodID payment method ID
	 */
	PaymentMethodID *string `json:"paymentMethodID,omitempty"`

	/* RawData raw data
	 */
	RawData []strfmt.Base64 `json:"rawData,omitempty"`

	/* RawReasonCode raw reason code
	 */
	RawReasonCode *string `json:"rawReasonCode,omitempty"`

	/* ReasonCode reason code
	 */
	ReasonCode int32 `json:"reasonCode,omitempty"`

	/* RefundID refund ID

	Required: true
	*/
	RefundID string `json:"refundID,omitempty"`

	/* Value value
	 */
	Value *float64 `json:"value,omitempty"`
}

// Validate validates this receipt
func (m *Receipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingEntity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDecision(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRawData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefundID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var receiptBillingEntityEnum []interface{}

func (m *Receipt) validateBillingEntityEnum(path, location string, value string) error {
	if receiptBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			receiptBillingEntityEnum = append(receiptBillingEntityEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, receiptBillingEntityEnum); err != nil {
		return err
	}
	return nil
}

func (m *Receipt) validateBillingEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingEntity) { // not required
		return nil
	}

	if err := m.validateBillingEntityEnum("billingEntity", "body", *m.BillingEntity); err != nil {
		return err
	}

	return nil
}

func (m *Receipt) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", string(m.Currency)); err != nil {
		return err
	}

	return nil
}

var receiptDecisionEnum []interface{}

func (m *Receipt) validateDecisionEnum(path, location string, value string) error {
	if receiptDecisionEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Accept","Reject","Error"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			receiptDecisionEnum = append(receiptDecisionEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, receiptDecisionEnum); err != nil {
		return err
	}
	return nil
}

func (m *Receipt) validateDecision(formats strfmt.Registry) error {

	if swag.IsZero(m.Decision) { // not required
		return nil
	}

	if err := m.validateDecisionEnum("decision", "body", *m.Decision); err != nil {
		return err
	}

	return nil
}

func (m *Receipt) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	return nil
}

var receiptInvoiceTypeEnum []interface{}

func (m *Receipt) validateInvoiceTypeEnum(path, location string, value string) error {
	if receiptInvoiceTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Subscription","Trial","Charge","FinalArrears","Amendment","Aggregated"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			receiptInvoiceTypeEnum = append(receiptInvoiceTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, receiptInvoiceTypeEnum); err != nil {
		return err
	}
	return nil
}

func (m *Receipt) validateInvoiceType(formats strfmt.Registry) error {

	if err := validate.Required("invoiceType", "body", string(m.InvoiceType)); err != nil {
		return err
	}

	if err := m.validateInvoiceTypeEnum("invoiceType", "body", m.InvoiceType); err != nil {
		return err
	}

	return nil
}

var receiptPaymentGatewayEnum []interface{}

func (m *Receipt) validatePaymentGatewayEnum(path, location string, value string) error {
	if receiptPaymentGatewayEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["cybersource_token","card_vault","paypal_simple","locustworld","free","coupon","credit_note","stripe","braintree","balanced","paypal","billforward_test","offline","trial","stripeACH","authorizeNet","spreedly","sagePay","trustCommerce","payvision","kash"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			receiptPaymentGatewayEnum = append(receiptPaymentGatewayEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, receiptPaymentGatewayEnum); err != nil {
		return err
	}
	return nil
}

func (m *Receipt) validatePaymentGateway(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentGateway) { // not required
		return nil
	}

	if err := m.validatePaymentGatewayEnum("paymentGateway", "body", *m.PaymentGateway); err != nil {
		return err
	}

	return nil
}

func (m *Receipt) validateRawData(formats strfmt.Registry) error {

	if swag.IsZero(m.RawData) { // not required
		return nil
	}

	for i := 0; i < len(m.RawData); i++ {

		if err := validate.Required("rawData"+"."+strconv.Itoa(i), "body", strfmt.Base64(m.RawData[i])); err != nil {
			return err
		}

	}

	return nil
}

func (m *Receipt) validateRefundID(formats strfmt.Registry) error {

	if err := validate.Required("refundID", "body", string(m.RefundID)); err != nil {
		return err
	}

	return nil
}
