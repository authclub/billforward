package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*
PricingComponentTier

swagger:model PricingComponentTier
*/
type PricingComponentTier struct {

	/* BillingEntity billing entity
	 */
	BillingEntity string `json:"billingEntity,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy string `json:"changedBy,omitempty"`

	/* { "description" : "Version ID of the pricing-component associated with the pricing-component-tier.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	ComponentID string `json:"componentID,omitempty"`

	/* { "description" : "ID of the pricing-component associated with the pricing-component-tier.", "verbs":["POST","PUT","GET"] }
	 */
	ConsistentPricingComponentID string `json:"consistentPricingComponentID,omitempty" xml:"pricingComponentID"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }
	 */
	CrmID string `json:"crmID,omitempty"`

	/* Crmid crmid
	 */
	Crmid string `json:"crmid,omitempty"`

	/* { "description" : "ID of the pricing-component-tier.", "verbs":["POST","PUT","GET"] }
	 */
	ID string `json:"id,omitempty"`

	/* { "description" : "The lower threshold of the tier.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	LowerThreshold int32 `json:"lowerThreshold,omitempty"`

	/* NotificationObjectGraph notification object graph
	 */
	NotificationObjectGraph string `json:"notificationObjectGraph,omitempty"`

	/* { "description" : "Organization associated with the pricing-component-tier.", "verbs":[] }
	 */
	OrganizationID string `json:"organizationID,omitempty"`

	/* { "description" : "Cost associated with tier. When the pricingType is fixed this is the total value. When pricingType is unit, this is the cost of each unit. ", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Price float64 `json:"price,omitempty"`

	/* { "description" : "The pricing-component associated with the tier.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	PricingComponent *PricingComponent `json:"pricingComponent,omitempty"`

	/* { "description" : "Pricing calculation used to price items in this pricing tier. Unit pricing means every distinct value is used in the calculation. Fixed means that the total price of the tier is fixed regardless of the purchased amount.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	PricingType string `json:"pricingType,omitempty"`

	/* {  "default" : "&infin;",  "description" : "The upper threshold of the tier. If this is left null the tier will be infinite", "verbs":["POST","PUT","GET"] }
	 */
	UpperThreshold int32 `json:"upperThreshold,omitempty"`
}

// Validate validates this pricing component tier
func (m *PricingComponentTier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowerThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pricingComponentTierBillingEntityEnum []interface{}

func (m *PricingComponentTier) validateBillingEntityEnum(path, location string, value string) error {
	if pricingComponentTierBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			pricingComponentTierBillingEntityEnum = append(pricingComponentTierBillingEntityEnum, v)
		}
	}
	return validate.Enum(path, location, value, pricingComponentTierBillingEntityEnum)
}

func (m *PricingComponentTier) validateBillingEntity(formats strfmt.Registry) error {

	if err := m.validateBillingEntityEnum("billingEntity", "body", m.BillingEntity); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validateComponentID(formats strfmt.Registry) error {

	if err := validate.Required("componentID", "body", string(m.ComponentID)); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validateLowerThreshold(formats strfmt.Registry) error {

	if err := validate.Required("lowerThreshold", "body", int32(m.LowerThreshold)); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", float64(m.Price)); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validatePricingComponent(formats strfmt.Registry) error {

	if m.PricingComponent != nil {

		if err := m.PricingComponent.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var pricingComponentTierPricingTypeEnum []interface{}

func (m *PricingComponentTier) validatePricingTypeEnum(path, location string, value string) error {
	if pricingComponentTierPricingTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["unit","fixed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			pricingComponentTierPricingTypeEnum = append(pricingComponentTierPricingTypeEnum, v)
		}
	}
	return validate.Enum(path, location, value, pricingComponentTierPricingTypeEnum)
}

func (m *PricingComponentTier) validatePricingType(formats strfmt.Registry) error {

	if err := validate.Required("pricingType", "body", string(m.PricingType)); err != nil {
		return err
	}

	if err := m.validatePricingTypeEnum("pricingType", "body", m.PricingType); err != nil {
		return err
	}

	return nil
}
