package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*PricingComponentTier PricingComponentTier

swagger:model PricingComponentTier
*/
type PricingComponentTier struct {

	/* BillingEntity billing entity
	 */
	BillingEntity *string `json:"billingEntity,omitempty"`

	/* { "description" : "ID of the user who last updated the entity.", "verbs":[] }
	 */
	ChangedBy *string `json:"changedBy,omitempty"`

	/* { "description" : "Version ID of the pricing-component associated with the pricing-component-tier.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	ComponentID string `json:"componentID,omitempty"`

	/* { "description" : "ID of the pricing-component associated with the pricing-component-tier.", "verbs":["POST","PUT","GET"] }
	 */
	ConsistentPricingComponentID *string `json:"consistentPricingComponentID,omitempty" xml:"pricingComponentID"`

	/* { "description" : "The UTC DateTime when the object was created.", "verbs":[] }
	 */
	Created strfmt.DateTime `json:"created,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }
	 */
	CrmID *string `json:"crmID,omitempty"`

	/* Crmid crmid
	 */
	Crmid *string `json:"crmid,omitempty"`

	/* { "description" : "ID of the pricing-component-tier.", "verbs":["POST","PUT","GET"] }
	 */
	ID *string `json:"id,omitempty"`

	/* { "description" : "The lower threshold of the tier.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	LowerThreshold int32 `json:"lowerThreshold,omitempty"`

	/* NotificationObjectGraph notification object graph
	 */
	NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

	/* { "description" : "Organization associated with the pricing-component-tier.", "verbs":[] }
	 */
	OrganizationID *string `json:"organizationID,omitempty"`

	/* { "description" : "Cost associated with tier. When the pricingType is fixed this is the total value. When pricingType is unit, this is the cost of each unit. ", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Price float64 `json:"price,omitempty"`

	PricingComponent PricingComponent `json:"-"`

	/* { "description" : "Pricing calculation used to price items in this pricing tier. Unit pricing means every distinct value is used in the calculation. Fixed means that the total price of the tier is fixed regardless of the purchased amount.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	PricingType string `json:"pricingType,omitempty"`

	/* {  "default" : "&infin;",  "description" : "The upper threshold of the tier. If this is left null the tier will be infinite", "verbs":["POST","PUT","GET"] }
	 */
	UpperThreshold int32 `json:"upperThreshold,omitempty"`
}

// Validate validates this pricing component tier
func (m *PricingComponentTier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingEntity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateComponentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLowerThreshold(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePricingComponent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePricingType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pricingComponentTierBillingEntityEnum []interface{}

func (m *PricingComponentTier) validateBillingEntityEnum(path, location string, value string) error {
	if pricingComponentTierBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			pricingComponentTierBillingEntityEnum = append(pricingComponentTierBillingEntityEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, pricingComponentTierBillingEntityEnum); err != nil {
		return err
	}
	return nil
}

func (m *PricingComponentTier) validateBillingEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingEntity) { // not required
		return nil
	}

	if err := m.validateBillingEntityEnum("billingEntity", "body", *m.BillingEntity); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validateComponentID(formats strfmt.Registry) error {

	if err := validate.Required("componentID", "body", string(m.ComponentID)); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validateLowerThreshold(formats strfmt.Registry) error {

	if err := validate.Required("lowerThreshold", "body", int32(m.LowerThreshold)); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", float64(m.Price)); err != nil {
		return err
	}

	return nil
}

func (m *PricingComponentTier) validatePricingComponent(formats strfmt.Registry) error {

	if err := m.PricingComponent.Validate(formats); err != nil {
		return err
	}

	return nil
}

var pricingComponentTierPricingTypeEnum []interface{}

func (m *PricingComponentTier) validatePricingTypeEnum(path, location string, value string) error {
	if pricingComponentTierPricingTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["unit","fixed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			pricingComponentTierPricingTypeEnum = append(pricingComponentTierPricingTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, pricingComponentTierPricingTypeEnum); err != nil {
		return err
	}
	return nil
}

func (m *PricingComponentTier) validatePricingType(formats strfmt.Registry) error {

	if err := validate.Required("pricingType", "body", string(m.PricingType)); err != nil {
		return err
	}

	if err := m.validatePricingTypeEnum("pricingType", "body", m.PricingType); err != nil {
		return err
	}

	return nil
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *PricingComponentTier) UnmarshalJSON(raw []byte) error {
	var data struct {
		BillingEntity *string `json:"billingEntity,omitempty"`

		ChangedBy *string `json:"changedBy,omitempty"`

		ComponentID string `json:"componentID,omitempty"`

		ConsistentPricingComponentID *string `json:"consistentPricingComponentID,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`

		CrmID *string `json:"crmID,omitempty"`

		Crmid *string `json:"crmid,omitempty"`

		ID *string `json:"id,omitempty"`

		LowerThreshold int32 `json:"lowerThreshold,omitempty"`

		NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

		OrganizationID *string `json:"organizationID,omitempty"`

		Price float64 `json:"price,omitempty"`

		PricingType string `json:"pricingType,omitempty"`

		UpperThreshold int32 `json:"upperThreshold,omitempty"`
	}

	if err := json.Unmarshal(raw, &data); err != nil {
		return err
	}

	pricingComponent, err := UnmarshalPricingComponent(bytes.NewBuffer(raw), httpkit.JSONConsumer())
	if err != nil {
		return err
	}

	var result PricingComponentTier
	result.BillingEntity = data.BillingEntity
	result.ChangedBy = data.ChangedBy
	result.ComponentID = data.ComponentID
	result.ConsistentPricingComponentID = data.ConsistentPricingComponentID
	result.Created = data.Created
	result.CrmID = data.CrmID
	result.Crmid = data.Crmid
	result.ID = data.ID
	result.LowerThreshold = data.LowerThreshold
	result.NotificationObjectGraph = data.NotificationObjectGraph
	result.OrganizationID = data.OrganizationID
	result.Price = data.Price
	result.PricingComponent = pricingComponent
	result.PricingType = data.PricingType
	result.UpperThreshold = data.UpperThreshold
	*m = result
	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m PricingComponentTier) MarshalJSON() ([]byte, error) {
	var b1, b2 []byte
	var err error
	b1, err = json.Marshal(struct {
		BillingEntity *string `json:"billingEntity,omitempty"`

		ChangedBy *string `json:"changedBy,omitempty"`

		ComponentID string `json:"componentID,omitempty"`

		ConsistentPricingComponentID *string `json:"consistentPricingComponentID,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`

		CrmID *string `json:"crmID,omitempty"`

		Crmid *string `json:"crmid,omitempty"`

		ID *string `json:"id,omitempty"`

		LowerThreshold int32 `json:"lowerThreshold,omitempty"`

		NotificationObjectGraph *string `json:"notificationObjectGraph,omitempty"`

		OrganizationID *string `json:"organizationID,omitempty"`

		Price float64 `json:"price,omitempty"`

		PricingType string `json:"pricingType,omitempty"`

		UpperThreshold int32 `json:"upperThreshold,omitempty"`
	}{
		BillingEntity:                m.BillingEntity,
		ChangedBy:                    m.ChangedBy,
		ComponentID:                  m.ComponentID,
		ConsistentPricingComponentID: m.ConsistentPricingComponentID,
		Created:                 m.Created,
		CrmID:                   m.CrmID,
		Crmid:                   m.Crmid,
		ID:                      m.ID,
		LowerThreshold:          m.LowerThreshold,
		NotificationObjectGraph: m.NotificationObjectGraph,
		OrganizationID:          m.OrganizationID,
		Price:                   m.Price,
		PricingType:             m.PricingType,
		UpperThreshold:          m.UpperThreshold,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		PricingComponent PricingComponent `json:"pricingComponent,omitempty"`
	}{
		PricingComponent: m.PricingComponent,
	})
	if err != nil {
		return nil, err
	}
	return swag.ConcatJSON(b1, b2), nil
}
