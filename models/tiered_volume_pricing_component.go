package models

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

/*TieredVolumePricingComponent tiered volume pricing component

swagger:model TieredVolumePricingComponent
*/
type TieredVolumePricingComponent struct {
	billingEntityField string

	changedByField string

	chargeTypeField string

	componentValueField int32

	consistentIdField string

	costField float64

	createdField strfmt.DateTime

	crmidField string

	defaultQuantityField int32

	descriptionField string

	downgradeModeField string

	dummyFieldField string

	idField string

	invoicingTypeField string

	maxQuantityField int32

	minQuantityField int32

	nameField string

	notificationObjectGraphField string

	organizationIdField string

	priceExplanationField []string

	priceExplanationStringField string

	productRatePlanField *ProductRatePlan

	productRatePlanIdField string

	tiersField []*PricingComponentTier

	unitOfMeasureIdField string

	updatedField strfmt.DateTime

	upgradeModeField string

	validFromField strfmt.DateTime

	validTillField strfmt.DateTime
}

func (m *TieredVolumePricingComponent) BillingEntity() string {
	return m.billingEntityField
}

func (m *TieredVolumePricingComponent) ChangedBy() string {
	return m.changedByField
}

func (m *TieredVolumePricingComponent) ChargeModel() string {
	return "TieredVolumePricingComponent"
}

func (m *TieredVolumePricingComponent) ChargeType() string {
	return m.chargeTypeField
}

func (m *TieredVolumePricingComponent) ComponentValue() int32 {
	return m.componentValueField
}

func (m *TieredVolumePricingComponent) ConsistentID() string {
	return m.consistentIdField
}

func (m *TieredVolumePricingComponent) Cost() float64 {
	return m.costField
}

func (m *TieredVolumePricingComponent) Created() strfmt.DateTime {
	return m.createdField
}

func (m *TieredVolumePricingComponent) Crmid() string {
	return m.crmidField
}

func (m *TieredVolumePricingComponent) DefaultQuantity() int32 {
	return m.defaultQuantityField
}

func (m *TieredVolumePricingComponent) Description() string {
	return m.descriptionField
}

func (m *TieredVolumePricingComponent) DowngradeMode() string {
	return m.downgradeModeField
}

func (m *TieredVolumePricingComponent) DummyField() string {
	return m.dummyFieldField
}

func (m *TieredVolumePricingComponent) ID() string {
	return m.idField
}

func (m *TieredVolumePricingComponent) InvoicingType() string {
	return m.invoicingTypeField
}

func (m *TieredVolumePricingComponent) MaxQuantity() int32 {
	return m.maxQuantityField
}

func (m *TieredVolumePricingComponent) MinQuantity() int32 {
	return m.minQuantityField
}

func (m *TieredVolumePricingComponent) Name() string {
	return m.nameField
}

func (m *TieredVolumePricingComponent) NotificationObjectGraph() string {
	return m.notificationObjectGraphField
}

func (m *TieredVolumePricingComponent) OrganizationID() string {
	return m.organizationIdField
}

func (m *TieredVolumePricingComponent) PriceExplanation() []string {
	return m.priceExplanationField
}

func (m *TieredVolumePricingComponent) PriceExplanationString() string {
	return m.priceExplanationStringField
}

func (m *TieredVolumePricingComponent) ProductRatePlan() *ProductRatePlan {
	return m.productRatePlanField
}

func (m *TieredVolumePricingComponent) ProductRatePlanID() string {
	return m.productRatePlanIdField
}

func (m *TieredVolumePricingComponent) Tiers() []*PricingComponentTier {
	return m.tiersField
}

func (m *TieredVolumePricingComponent) UnitOfMeasureID() string {
	return m.unitOfMeasureIdField
}

func (m *TieredVolumePricingComponent) Updated() strfmt.DateTime {
	return m.updatedField
}

func (m *TieredVolumePricingComponent) UpgradeMode() string {
	return m.upgradeModeField
}

func (m *TieredVolumePricingComponent) ValidFrom() strfmt.DateTime {
	return m.validFromField
}

func (m *TieredVolumePricingComponent) ValidTill() strfmt.DateTime {
	return m.validTillField
}

// UnmarshalJSON unmarshals this polymorphic type from a JSON structure
func (m *TieredVolumePricingComponent) UnmarshalJSON(raw []byte) error {
	var data struct {
		BillingEntity string `json:"billingEntity,omitempty"`

		ChangedBy string `json:"changedBy,omitempty"`

		ChargeModel string `json:"chargeModel,omitempty"`

		ChargeType string `json:"chargeType,omitempty"`

		ComponentValue int32 `json:"componentValue,omitempty"`

		ConsistentID string `json:"consistentID,omitempty" xml:"id"`

		Cost float64 `json:"cost,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`

		Crmid string `json:"crmid,omitempty"`

		DefaultQuantity int32 `json:"defaultQuantity,omitempty"`

		Description string `json:"description,omitempty"`

		DowngradeMode string `json:"downgradeMode,omitempty"`

		DummyField string `json:"dummyField,omitempty" xml:"@type"`

		ID string `json:"id,omitempty" xml:"versionID"`

		InvoicingType string `json:"invoicingType,omitempty"`

		MaxQuantity int32 `json:"maxQuantity,omitempty"`

		MinQuantity int32 `json:"minQuantity,omitempty"`

		Name string `json:"name,omitempty"`

		NotificationObjectGraph string `json:"notificationObjectGraph,omitempty"`

		OrganizationID string `json:"organizationID,omitempty"`

		PriceExplanation []string `json:"priceExplanation,omitempty"`

		PriceExplanationString string `json:"priceExplanationString,omitempty"`

		ProductRatePlan *ProductRatePlan `json:"productRatePlan,omitempty"`

		ProductRatePlanID string `json:"productRatePlanID,omitempty"`

		Tiers []*PricingComponentTier `json:"tiers,omitempty"`

		UnitOfMeasureID string `json:"unitOfMeasureID,omitempty"`

		Updated strfmt.DateTime `json:"updated,omitempty"`

		UpgradeMode string `json:"upgradeMode,omitempty"`

		ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

		ValidTill strfmt.DateTime `json:"validTill,omitempty"`
	}

	if err := json.Unmarshal(raw, &data); err != nil {
		return err
	}

	m.billingEntityField = data.BillingEntity
	m.changedByField = data.ChangedBy
	m.chargeTypeField = data.ChargeType
	m.componentValueField = data.ComponentValue
	m.consistentIdField = data.ConsistentID
	m.costField = data.Cost
	m.createdField = data.Created
	m.crmidField = data.Crmid
	m.defaultQuantityField = data.DefaultQuantity
	m.descriptionField = data.Description
	m.downgradeModeField = data.DowngradeMode
	m.dummyFieldField = data.DummyField
	m.idField = data.ID
	m.invoicingTypeField = data.InvoicingType
	m.maxQuantityField = data.MaxQuantity
	m.minQuantityField = data.MinQuantity
	m.nameField = data.Name
	m.notificationObjectGraphField = data.NotificationObjectGraph
	m.organizationIdField = data.OrganizationID
	m.priceExplanationField = data.PriceExplanation
	m.priceExplanationStringField = data.PriceExplanationString
	m.productRatePlanField = data.ProductRatePlan
	m.productRatePlanIdField = data.ProductRatePlanID
	m.tiersField = data.Tiers
	m.unitOfMeasureIdField = data.UnitOfMeasureID
	m.updatedField = data.Updated
	m.upgradeModeField = data.UpgradeMode
	m.validFromField = data.ValidFrom
	m.validTillField = data.ValidTill

	return nil
}

// MarshalJSON marshals this polymorphic type to a JSON structure
func (m TieredVolumePricingComponent) MarshalJSON() ([]byte, error) {
	var data struct {
		BillingEntity string `json:"billingEntity,omitempty"`

		ChangedBy string `json:"changedBy,omitempty"`

		ChargeModel string `json:"chargeModel,omitempty"`

		ChargeType string `json:"chargeType,omitempty"`

		ComponentValue int32 `json:"componentValue,omitempty"`

		ConsistentID string `json:"consistentID,omitempty" xml:"id"`

		Cost float64 `json:"cost,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`

		Crmid string `json:"crmid,omitempty"`

		DefaultQuantity int32 `json:"defaultQuantity,omitempty"`

		Description string `json:"description,omitempty"`

		DowngradeMode string `json:"downgradeMode,omitempty"`

		DummyField string `json:"dummyField,omitempty" xml:"@type"`

		ID string `json:"id,omitempty" xml:"versionID"`

		InvoicingType string `json:"invoicingType,omitempty"`

		MaxQuantity int32 `json:"maxQuantity,omitempty"`

		MinQuantity int32 `json:"minQuantity,omitempty"`

		Name string `json:"name,omitempty"`

		NotificationObjectGraph string `json:"notificationObjectGraph,omitempty"`

		OrganizationID string `json:"organizationID,omitempty"`

		PriceExplanation []string `json:"priceExplanation,omitempty"`

		PriceExplanationString string `json:"priceExplanationString,omitempty"`

		ProductRatePlan *ProductRatePlan `json:"productRatePlan,omitempty"`

		ProductRatePlanID string `json:"productRatePlanID,omitempty"`

		Tiers []*PricingComponentTier `json:"tiers,omitempty"`

		UnitOfMeasureID string `json:"unitOfMeasureID,omitempty"`

		Updated strfmt.DateTime `json:"updated,omitempty"`

		UpgradeMode string `json:"upgradeMode,omitempty"`

		ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

		ValidTill strfmt.DateTime `json:"validTill,omitempty"`
	}

	data.BillingEntity = m.billingEntityField
	data.ChangedBy = m.changedByField
	data.ChargeType = m.chargeTypeField
	data.ComponentValue = m.componentValueField
	data.ConsistentID = m.consistentIdField
	data.Cost = m.costField
	data.Created = m.createdField
	data.Crmid = m.crmidField
	data.DefaultQuantity = m.defaultQuantityField
	data.Description = m.descriptionField
	data.DowngradeMode = m.downgradeModeField
	data.DummyField = m.dummyFieldField
	data.ID = m.idField
	data.InvoicingType = m.invoicingTypeField
	data.MaxQuantity = m.maxQuantityField
	data.MinQuantity = m.minQuantityField
	data.Name = m.nameField
	data.NotificationObjectGraph = m.notificationObjectGraphField
	data.OrganizationID = m.organizationIdField
	data.PriceExplanation = m.priceExplanationField
	data.PriceExplanationString = m.priceExplanationStringField
	data.ProductRatePlan = m.productRatePlanField
	data.ProductRatePlanID = m.productRatePlanIdField
	data.Tiers = m.tiersField
	data.UnitOfMeasureID = m.unitOfMeasureIdField
	data.Updated = m.updatedField
	data.UpgradeMode = m.upgradeModeField
	data.ValidFrom = m.validFromField
	data.ValidTill = m.validTillField
	data.ChargeModel = "TieredVolumePricingComponent"
	return json.Marshal(data)
}

// Validate validates this tiered volume pricing component
func (m *TieredVolumePricingComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDowngradeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDummyField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoicingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductRatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductRatePlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasureID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tieredVolumePricingComponentBillingEntityEnum []interface{}

func (m *TieredVolumePricingComponent) validateBillingEntityEnum(path, location string, value string) error {
	if tieredVolumePricingComponentBillingEntityEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Notification","Organization","OrganizationGateway","Product","User","Subscription","Profile","ProductRatePlan","Client","Invoice","PricingComponentValue","Account","PricingComponentValueChange","PricingComponentTier","PricingComponent","PricingCalculation","CouponDefinition","CouponInstance","CouponModifier","CouponRule","CouponBookDefinition","CouponBook","InvoiceLine","Webhook","SubscriptionCancellation","NotificationSnapshot","InvoicePayment","InvoiceLinePayment","Payment","PaymentMethod","PaymentMethodSubscriptionLink","DunningLine","CybersourceToken","Card","Alias","PaypalSimplePaymentReconciliation","FreePaymentReconciliation","LocustworldPaymentReconciliation","CouponInstanceExistingValue","TaxLine","TaxationStrategy","TaxationLink","Address","AmendmentPriceNTime","Authority","UnitOfMeasure","SearchResult","Amendment","AuditLog","Password","Username","FixedTermDefinition","FixedTerm","Refund","CreditNote","Receipt","AmendmentCompoundConstituent","APIConfiguration","StripeToken","BraintreeToken","BalancedToken","PaypalToken","AuthorizeNetToken","SpreedlyToken","GatewayRevenue","AmendmentDiscardAmendment","CancellationAmendment","CompoundAmendment","CompoundAmendmentConstituent","FixedTermExpiryAmendment","InvoiceNextExecutionAttemptAmendment","PricingComponentValueAmendment","BraintreeMerchantAccount","WebhookSubscription","Migration","CassResult","CassPaymentResult","CassProductRatePlanResult","CassChurnResult","CassUpgradeResult","SubscriptionCharge","CassPaymentPProductResult","ProductPaymentsArgs","StripeACHToken","UsageAmount","UsageSession","Usage","UsagePeriod","Period","OfflinePayment","CreditNotePayment","CardVaultPayment","FreePayment","BraintreePayment","BalancedPayment","CybersourcePayment","PaypalPayment","PaypalSimplePayment","LocustWorldPayment","StripeOnlyPayment","ProductPaymentsResult","StripeACHPayment","AuthorizeNetPayment","CompoundUsageSession","CompoundUsage","UsageRoundingStrategies","BillforwardManagedPaymentsResult","PricingComponentValueMigrationChargeAmendmentMapping","SubscriptionLTVResult","AccountLTVResult","ProductRatePlanPaymentsResult","DebtsResult","AccountPaymentsResult","ComponentChange","QuoteRequest","Quote","CouponCharge","CouponInstanceInvoiceLink","Coupon","CouponDiscount","CouponUniqueCodesRequest","CouponUniqueCodesResponse","GetCouponsResponse","AddCouponCodeRequest","AddCouponCodeResponse","RemoveCouponFromSubscriptionRequest","TokenizationPreAuth","StripeTokenizationPreAuth","BraintreeTokenizationPreAuth","SpreedlyTokenizationPreAuth","SagePayTokenizationPreAuth","PayVisionTokenizationPreAuth","TokenizationPreAuthRequest","AuthCaptureRequest","StripeACHBankAccountVerification","PasswordReset","PricingRequest","AddTaxationStrategyRequest","AddPaymentMethodRequest","APIRequest","SagePayToken","SagePayNotificationRequest","SagePayNotificationResponse","SagePayOutstandingTransaction","SagePayEnabledCardType","TrustCommerceToken","SagePayTransaction","PricingComponentValueResponse","MigrationResponse","TimeResponse","EntityTime","Email","AggregationLink","BFPermission","Role","PermissionLink","PayVisionToken","PayVisionTransaction","KashToken","EmailProvider","DataSynchronizationJob","DataSynchronizationJobError","DataSynchronizationConfiguration","DataSynchronizationAppConfiguration","AggregationChildrenResponse","MetadataKeyValue","Metadata","AggregatingComponent","PricingComponentMigrationValue","InvoiceRecalculationAmendment","IssueInvoiceAmendment","EmailSubscription","RevenueAttribution"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredVolumePricingComponentBillingEntityEnum = append(tieredVolumePricingComponentBillingEntityEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentBillingEntityEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateBillingEntity(formats strfmt.Registry) error {

	if err := m.validateBillingEntityEnum("billingEntity", "body", m.BillingEntity()); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentChargeTypeEnum []interface{}

func (m *TieredVolumePricingComponent) validateChargeTypeEnum(path, location string, value string) error {
	if tieredVolumePricingComponentChargeTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["setup","subscription","arrears","usage"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredVolumePricingComponentChargeTypeEnum = append(tieredVolumePricingComponentChargeTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentChargeTypeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateChargeType(formats strfmt.Registry) error {

	if err := validate.Required("chargeType", "body", string(m.ChargeType())); err != nil {
		return err
	}

	if err := m.validateChargeTypeEnum("chargeType", "body", m.ChargeType()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateConsistentID(formats strfmt.Registry) error {

	if err := validate.Required("consistentID", "body", string(m.ConsistentID())); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateDefaultQuantity(formats strfmt.Registry) error {

	if err := validate.Required("defaultQuantity", "body", int32(m.DefaultQuantity())); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentDowngradeModeEnum []interface{}

func (m *TieredVolumePricingComponent) validateDowngradeModeEnum(path, location string, value string) error {
	if tieredVolumePricingComponentDowngradeModeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredVolumePricingComponentDowngradeModeEnum = append(tieredVolumePricingComponentDowngradeModeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentDowngradeModeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateDowngradeMode(formats strfmt.Registry) error {

	if err := m.validateDowngradeModeEnum("downgradeMode", "body", m.DowngradeMode()); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentDummyFieldEnum []interface{}

func (m *TieredVolumePricingComponent) validateDummyFieldEnum(path, location string, value string) error {
	if tieredVolumePricingComponentDummyFieldEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["TieredPricingComponent","FlatPricingComponent","TieredVolumePricingComponent"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredVolumePricingComponentDummyFieldEnum = append(tieredVolumePricingComponentDummyFieldEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentDummyFieldEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateDummyField(formats strfmt.Registry) error {

	if err := validate.Required("dummyField", "body", string(m.DummyField())); err != nil {
		return err
	}

	if err := m.validateDummyFieldEnum("dummyField", "body", m.DummyField()); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentInvoicingTypeEnum []interface{}

func (m *TieredVolumePricingComponent) validateInvoicingTypeEnum(path, location string, value string) error {
	if tieredVolumePricingComponentInvoicingTypeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Immediate","Aggregated"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredVolumePricingComponentInvoicingTypeEnum = append(tieredVolumePricingComponentInvoicingTypeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentInvoicingTypeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateInvoicingType(formats strfmt.Registry) error {

	if err := m.validateInvoicingTypeEnum("invoicingType", "body", m.InvoicingType()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", string(m.Name())); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationID", "body", string(m.OrganizationID())); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateProductRatePlan(formats strfmt.Registry) error {

	if m.ProductRatePlan != nil {

		if err := m.ProductRatePlan().Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateProductRatePlanID(formats strfmt.Registry) error {

	if err := validate.Required("productRatePlanID", "body", string(m.ProductRatePlanID())); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateUnitOfMeasureID(formats strfmt.Registry) error {

	if err := validate.Required("unitOfMeasureID", "body", string(m.UnitOfMeasureID())); err != nil {
		return err
	}

	return nil
}

var tieredVolumePricingComponentUpgradeModeEnum []interface{}

func (m *TieredVolumePricingComponent) validateUpgradeModeEnum(path, location string, value string) error {
	if tieredVolumePricingComponentUpgradeModeEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["immediate","delayed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tieredVolumePricingComponentUpgradeModeEnum = append(tieredVolumePricingComponentUpgradeModeEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tieredVolumePricingComponentUpgradeModeEnum); err != nil {
		return err
	}
	return nil
}

func (m *TieredVolumePricingComponent) validateUpgradeMode(formats strfmt.Registry) error {

	if err := m.validateUpgradeModeEnum("upgradeMode", "body", m.UpgradeMode()); err != nil {
		return err
	}

	return nil
}

func (m *TieredVolumePricingComponent) validateValidFrom(formats strfmt.Registry) error {

	if err := validate.Required("validFrom", "body", strfmt.DateTime(m.ValidFrom())); err != nil {
		return err
	}

	return nil
}
