package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*CreateAddressRequest CreateAddressRequest

swagger:model CreateAddressRequest
*/
type CreateAddressRequest struct {

	/* { "description" : "", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	AddressLine1 string `json:"addressLine1,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }
	 */
	AddressLine2 *string `json:"addressLine2,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }
	 */
	AddressLine3 *string `json:"addressLine3,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	City string `json:"city,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Country string `json:"country,omitempty"`

	/* { "description" : "Phone number", "verbs":["POST","PUT","GET"] }
	 */
	Landline *string `json:"landline,omitempty"`

	/* { "description" : "ZIP code or postcode.", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Postcode string `json:"postcode,omitempty"`

	/* { "description" : "Is this the primary, default, address for the associated profile?", "verbs":["POST","PUT","GET"] }
	 */
	PrimaryAddress *bool `json:"primaryAddress,omitempty"`

	/* { "description" : "", "verbs":["GET"] }

	Required: true
	*/
	ProfileID string `json:"profileID,omitempty"`

	/* { "description" : "", "verbs":["POST","PUT","GET"] }

	Required: true
	*/
	Province string `json:"province,omitempty"`
}

// Validate validates this create address request
func (m *CreateAddressRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfileID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProvince(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAddressRequest) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.RequiredString("addressLine1", "body", string(m.AddressLine1)); err != nil {
		return err
	}

	return nil
}

func (m *CreateAddressRequest) validateCity(formats strfmt.Registry) error {

	if err := validate.RequiredString("city", "body", string(m.City)); err != nil {
		return err
	}

	return nil
}

func (m *CreateAddressRequest) validateCountry(formats strfmt.Registry) error {

	if err := validate.RequiredString("country", "body", string(m.Country)); err != nil {
		return err
	}

	return nil
}

func (m *CreateAddressRequest) validatePostcode(formats strfmt.Registry) error {

	if err := validate.RequiredString("postcode", "body", string(m.Postcode)); err != nil {
		return err
	}

	return nil
}

func (m *CreateAddressRequest) validateProfileID(formats strfmt.Registry) error {

	if err := validate.RequiredString("profileID", "body", string(m.ProfileID)); err != nil {
		return err
	}

	return nil
}

func (m *CreateAddressRequest) validateProvince(formats strfmt.Registry) error {

	if err := validate.RequiredString("province", "body", string(m.Province)); err != nil {
		return err
	}

	return nil
}
