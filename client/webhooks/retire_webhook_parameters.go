package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRetireWebhookParams creates a new RetireWebhookParams object
// with the default values initialized.
func NewRetireWebhookParams() *RetireWebhookParams {
	var ()
	return &RetireWebhookParams{}
}

/*RetireWebhookParams contains all the parameters to send to the API endpoint
for the retire webhook operation typically these are written to a http.Request
*/
type RetireWebhookParams struct {

	/*Organizations
	  A list of organization-IDs used to restrict the scope of API calls.

	*/
	Organizations []string
	/*WebhookID
	  ID of the webhook.

	*/
	WebhookID string
}

// WithOrganizations adds the organizations to the retire webhook params
func (o *RetireWebhookParams) WithOrganizations(Organizations []string) *RetireWebhookParams {
	o.Organizations = Organizations
	return o
}

// WithWebhookID adds the webhookId to the retire webhook params
func (o *RetireWebhookParams) WithWebhookID(WebhookID string) *RetireWebhookParams {
	o.WebhookID = WebhookID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *RetireWebhookParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	valuesOrganizations := o.Organizations

	joinedOrganizations := swag.JoinByFormat(valuesOrganizations, "multi")
	// query array param organizations
	if err := r.SetQueryParam("organizations", joinedOrganizations...); err != nil {
		return err
	}

	// path param webhook-ID
	if err := r.SetPathParam("webhook-ID", o.WebhookID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
