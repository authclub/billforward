package product_rate_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewDeleteMetadataForRatePlanParams creates a new DeleteMetadataForRatePlanParams object
// with the default values initialized.
func NewDeleteMetadataForRatePlanParams() *DeleteMetadataForRatePlanParams {
	var ()
	return &DeleteMetadataForRatePlanParams{}
}

/*DeleteMetadataForRatePlanParams contains all the parameters to send to the API endpoint
for the delete metadata for rate plan operation typically these are written to a http.Request
*/
type DeleteMetadataForRatePlanParams struct {

	/*Organizations
	  A list of organization-IDs used to restrict the scope of API calls.

	*/
	Organizations []string
	/*ProductRatePlanID*/
	ProductRatePlanID string
}

// WithOrganizations adds the organizations to the delete metadata for rate plan params
func (o *DeleteMetadataForRatePlanParams) WithOrganizations(organizations []string) *DeleteMetadataForRatePlanParams {
	o.Organizations = organizations
	return o
}

// WithProductRatePlanID adds the productRatePlanId to the delete metadata for rate plan params
func (o *DeleteMetadataForRatePlanParams) WithProductRatePlanID(productRatePlanId string) *DeleteMetadataForRatePlanParams {
	o.ProductRatePlanID = productRatePlanId
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteMetadataForRatePlanParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	valuesOrganizations := o.Organizations

	joinedOrganizations := swag.JoinByFormat(valuesOrganizations, "multi")
	// query array param organizations
	if err := r.SetQueryParam("organizations", joinedOrganizations...); err != nil {
		return err
	}

	// path param product-rate-plan-ID
	if err := r.SetPathParam("product-rate-plan-ID", o.ProductRatePlanID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
