package payment_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new payment methods API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment methods API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeletePaymentMethod deletes the payment method specified by the payment method ID parameter

{"nickname":"Delete payment method","response":"deletePaymentMethod.html"}
*/
func (a *Client) DeletePaymentMethod(params *DeletePaymentMethodParams) (*DeletePaymentMethodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePaymentMethodParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePaymentMethod",
		Method:             "DELETE",
		PathPattern:        "/payment-methods/{payment-method-ID}",
		ProducesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePaymentMethodReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePaymentMethodOK), nil
}

/*
GetAllPaymentMethods returns a collection of all payment methods by default 10 values are returned records are returned in natural order

{"nickname":"Get all payment methods","response":"getPaymentMethodAll.html"}
*/
func (a *Client) GetAllPaymentMethods(params *GetAllPaymentMethodsParams) (*GetAllPaymentMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPaymentMethodsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getAllPaymentMethods",
		Method:             "GET",
		PathPattern:        "/payment-methods",
		ProducesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllPaymentMethodsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllPaymentMethodsOK), nil
}

/*
GetPaymentMethodByAccountID returns a collection of payment methods specified by the account ID parameter by default 10 values are returned records are returned in natural order

{"nickname":"Retrieve by account","response":"getPaymentMethodByAccount.html"}
*/
func (a *Client) GetPaymentMethodByAccountID(params *GetPaymentMethodByAccountIDParams) (*GetPaymentMethodByAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentMethodByAccountIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPaymentMethodByAccountID",
		Method:             "GET",
		PathPattern:        "/payment-methods/account/{account-ID}",
		ProducesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentMethodByAccountIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentMethodByAccountIDOK), nil
}

/*
GetPaymentMethodByID returns a single payment method specified by the payment method ID parameter

{"nickname":"Get existing payment method","response":"getPaymentMethodByID.html"}
*/
func (a *Client) GetPaymentMethodByID(params *GetPaymentMethodByIDParams) (*GetPaymentMethodByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentMethodByIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPaymentMethodByID",
		Method:             "GET",
		PathPattern:        "/payment-methods/{payment-method-ID}",
		ProducesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentMethodByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentMethodByIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
