package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

// NewSetMetadataForSubscriptionParams creates a new SetMetadataForSubscriptionParams object
// with the default values initialized.
func NewSetMetadataForSubscriptionParams() *SetMetadataForSubscriptionParams {
	var ()
	return &SetMetadataForSubscriptionParams{}
}

/*SetMetadataForSubscriptionParams contains all the parameters to send to the API endpoint
for the set metadata for subscription operation typically these are written to a http.Request
*/
type SetMetadataForSubscriptionParams struct {

	/*Metadata*/
	Metadata string
	/*Organizations
	  A list of organization-IDs used to restrict the scope of API calls.

	*/
	Organizations []string
	/*SubscriptionID*/
	SubscriptionID string
}

// WithMetadata adds the metadata to the set metadata for subscription params
func (o *SetMetadataForSubscriptionParams) WithMetadata(metadata string) *SetMetadataForSubscriptionParams {
	o.Metadata = metadata
	return o
}

// WithOrganizations adds the organizations to the set metadata for subscription params
func (o *SetMetadataForSubscriptionParams) WithOrganizations(organizations []string) *SetMetadataForSubscriptionParams {
	o.Organizations = organizations
	return o
}

// WithSubscriptionID adds the subscriptionId to the set metadata for subscription params
func (o *SetMetadataForSubscriptionParams) WithSubscriptionID(subscriptionId string) *SetMetadataForSubscriptionParams {
	o.SubscriptionID = subscriptionId
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *SetMetadataForSubscriptionParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if err := r.SetBodyParam(o.Metadata); err != nil {
		return err
	}

	valuesOrganizations := o.Organizations

	joinedOrganizations := swag.JoinByFormat(valuesOrganizations, "multi")
	// query array param organizations
	if err := r.SetQueryParam("organizations", joinedOrganizations...); err != nil {
		return err
	}

	// path param subscription-ID
	if err := r.SetPathParam("subscription-ID", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
