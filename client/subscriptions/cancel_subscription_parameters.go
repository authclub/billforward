package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/authclub/billforward/models"
)

// NewCancelSubscriptionParams creates a new CancelSubscriptionParams object
// with the default values initialized.
func NewCancelSubscriptionParams() *CancelSubscriptionParams {
	var ()
	return &CancelSubscriptionParams{}
}

/*CancelSubscriptionParams contains all the parameters to send to the API endpoint
for the cancel subscription operation typically these are written to a http.Request
*/
type CancelSubscriptionParams struct {

	/*SubscriptionID*/
	SubscriptionID string
	/*SubscriptionCancellation
	  The cancellation request

	*/
	SubscriptionCancellation *models.CancelSubscriptionRequest
}

// WithSubscriptionID adds the subscriptionId to the cancel subscription params
func (o *CancelSubscriptionParams) WithSubscriptionID(SubscriptionID string) *CancelSubscriptionParams {
	o.SubscriptionID = SubscriptionID
	return o
}

// WithSubscriptionCancellation adds the subscriptionCancellation to the cancel subscription params
func (o *CancelSubscriptionParams) WithSubscriptionCancellation(SubscriptionCancellation *models.CancelSubscriptionRequest) *CancelSubscriptionParams {
	o.SubscriptionCancellation = SubscriptionCancellation
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CancelSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	// path param subscription-ID
	if err := r.SetPathParam("subscription-ID", o.SubscriptionID); err != nil {
		return err
	}

	if o.SubscriptionCancellation == nil {
		o.SubscriptionCancellation = new(models.CancelSubscriptionRequest)
	}

	if err := r.SetBodyParam(o.SubscriptionCancellation); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
