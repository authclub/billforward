package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/authclub/billforward/models"
)

// NewAddPaymentMethodToSubscriptionParams creates a new AddPaymentMethodToSubscriptionParams object
// with the default values initialized.
func NewAddPaymentMethodToSubscriptionParams() *AddPaymentMethodToSubscriptionParams {
	var ()
	return &AddPaymentMethodToSubscriptionParams{}
}

/*AddPaymentMethodToSubscriptionParams contains all the parameters to send to the API endpoint
for the add payment method to subscription operation typically these are written to a http.Request
*/
type AddPaymentMethodToSubscriptionParams struct {

	/*PaymentMethod*/
	PaymentMethod *models.AddPaymentMethodRequest
	/*SubscriptionID*/
	SubscriptionID string
}

// WithPaymentMethod adds the paymentMethod to the add payment method to subscription params
func (o *AddPaymentMethodToSubscriptionParams) WithPaymentMethod(PaymentMethod *models.AddPaymentMethodRequest) *AddPaymentMethodToSubscriptionParams {
	o.PaymentMethod = PaymentMethod
	return o
}

// WithSubscriptionID adds the subscriptionId to the add payment method to subscription params
func (o *AddPaymentMethodToSubscriptionParams) WithSubscriptionID(SubscriptionID string) *AddPaymentMethodToSubscriptionParams {
	o.SubscriptionID = SubscriptionID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *AddPaymentMethodToSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	if o.PaymentMethod == nil {
		o.PaymentMethod = new(models.AddPaymentMethodRequest)
	}

	if err := r.SetBodyParam(o.PaymentMethod); err != nil {
		return err
	}

	// path param subscription-ID
	if err := r.SetPathParam("subscription-ID", o.SubscriptionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
